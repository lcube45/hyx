<?php
/**
 * Implements hook_migrate_api()
 */
function hyx_import_migrate_api() {

  // Specify the DB connection and the source Drupal version.
  $common_arguments = array(
    'source_connection' => 'legacy',
    'source_version' => 6,
    'group_name' => 'hyx',
    'format_mappings' => array(
      '0' => 'plain_text',
    ),
  );

  $api = array(
    'api' => 2,
    'groups' => array(
      'hyx' => array(
        'title' => t('Editions HYX : Migration des contenus'),
      )
    ),
    'migrations' => array(
      'HyxProduct' => array(
        'class_name' => 'HyxProductMigration',
        'group_name' => 'hyx'
      ),
    ),
  );

  /**
   * For vocabulary migrations, source_vocabulary and destination_vocabulary are
   * required arguments. Note that in Drupal 6 vocabularies did not have machine
   * names, so we use the vocabulary ID to uniquely identify them.
   */
  $vocabulary_arguments = array(
    'Collection' => array(
      'description' => t('Migration of Collection terms from Drupal 6'),
      'source_vocabulary' => '2',  // D6 Vocabulary ID
      'destination_vocabulary' => 'collection',
      'group_name' => 'hyx',
    ),
    'Langue' => array(
      'description' => t('Migration of Langue terms from Drupal 6'),
      'source_vocabulary' => '3',  // D6 Vocabulary ID
      'destination_vocabulary' => 'langue',
      'group_name' => 'hyx',
    ),
    'Tags' => array(
      'description' => t('Migration of Tags terms from Drupal 6'),
      'source_vocabulary' => '4',  // D6 Vocabulary ID
      'destination_vocabulary' => 'tags',
      'group_name' => 'hyx',
    ),
    'Thematique' => array(
      'description' => t('Migration of Thematique terms from Drupal 6'),
      'source_vocabulary' => '1',  // D6 Vocabulary ID
      'destination_vocabulary' => 'thematique',
      'group_name' => 'hyx',
    ),
    'Categorie' => array(
      'description' => t('Migration of Blog category terms from Drupal 6'),
      'source_vocabulary' => '5',  // D6 Vocabulary ID
      'destination_vocabulary' => 'categorie',
      'group_name' => 'hyx',
    ),
  );
  /**
   * Again, we're using the migrate_d2d class directly.
   * The soft dependency says that while we don't have to run the user migration
   * first, we want to make sure it's listed first so the vocabularies are
   * listed right ahead of the node migrations.
   */
  $common_vocabulary_arguments = $common_arguments + array(
    'class_name' => 'DrupalTerm6Migration',
  );

  foreach ($vocabulary_arguments as $migration_name => $arguments) {
    $arguments += $common_vocabulary_arguments;
    $api['migrations'][$migration_name] = $arguments;
  }

  /**
   * Node migrations - each has its own class derived from the migrate_d2d class,
   * specifying its particular field mappings and transformations. source_type
   * and destination_type are required arguments.
   */
  $node_arguments = array(
    'Auteur' => array(
      'class_name' => 'HyxAuteurMigration',
      'description' => t('Migration of auteur nodes from Drupal 6'),
      'source_type' => 'auteur',
      'destination_type' => 'auteur',
    ),
    'Livre' => array(
      'class_name' => 'HyxLivreMigration',
      'description' => t('Migration of livre nodes from Drupal 6'),
      'source_type' => 'product',
      'destination_type' => 'livre',
    ),
    'Blog' => array(
      'class_name' => 'HyxBlogMigration',
      'description' => t('Migration of blog nodes from Drupal 6'),
      'source_type' => 'blog',
      'destination_type' => 'blog',
    ),
  );

  foreach ($node_arguments as $migration_name => $arguments) {
    $arguments = array_merge_recursive($arguments, $common_arguments);
    $api['migrations'][$migration_name] = $arguments;
  }

  // Register the file migration.
  // source_dir needs to be adjusted to match your file system.
  $api['migrations']['File'] = $common_arguments + array(
    'machine_name' => 'filemigration',
    'description' => t('Import Drupal 6 files'),
    'class_name' => 'HyxFileMigration',
    'default_uid' => 1,
    'source_dir' => '/Users/lcube/Documents/newsletter-hyx',
    'destination_dir' => 'public://media',
  );

  return $api;
}